// DO NOT EDIT
// Generated by JFlex 1.8.1 http://jflex.de/
// source: Scanner.flex

/* this part will be added to java files directly! */
package compiler.scanner;

import java.io.*;

import compiler.scanner.token.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public final class MyScanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 100000;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING_STATE = 2;
  public static final int CHAR_STATE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\2\0\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\11\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\0\4\32\1\33"+
    "\1\34\5\35\1\36\13\35\1\37\2\35\1\40\1\41"+
    "\1\42\1\43\1\44\1\0\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\35\1\56\1\57"+
    "\1\35\1\60\1\61\1\62\1\35\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\2\35\1\72\1\73\1\74"+
    "\7\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\1\1\15"+
    "\2\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\1\21\24\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\2\0\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\0\1\44\1\45\1\46\1\47\3\0\1\50"+
    "\1\0\1\51\1\52\1\53\1\0\17\24\1\54\1\55"+
    "\3\24\1\56\1\57\10\24\1\60\1\61\1\62\1\63"+
    "\1\64\1\0\1\65\3\0\1\66\2\0\1\67\1\70"+
    "\1\71\12\24\1\72\1\24\1\73\2\24\1\74\1\24"+
    "\1\75\1\76\11\24\1\77\1\100\1\101\1\102\1\103"+
    "\1\0\1\104\1\24\1\105\1\24\1\106\1\107\4\24"+
    "\1\110\4\24\1\111\6\24\1\112\1\24\1\113\1\114"+
    "\1\115\1\116\3\24\1\117\2\24\1\120\6\24\1\121"+
    "\2\24\1\122\3\24\1\123\1\124\1\125\1\126\1\127"+
    "\1\24\1\130\1\131\1\24\1\132\1\133\1\134";

  private static int [] zzUnpackAction() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\267\0\364\0\u0131\0\267"+
    "\0\u016e\0\267\0\267\0\u01ab\0\267\0\u01e8\0\u0225\0\267"+
    "\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356\0\267\0\267\0\u0393"+
    "\0\u03d0\0\u040d\0\u044a\0\267\0\267\0\267\0\u0487\0\u04c4"+
    "\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac"+
    "\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857\0\u0894"+
    "\0\267\0\267\0\267\0\u08d1\0\267\0\u090e\0\u094b\0\u0988"+
    "\0\267\0\267\0\267\0\267\0\267\0\267\0\u029f\0\267"+
    "\0\267\0\267\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\267\0\u0ab9"+
    "\0\267\0\267\0\267\0\u0487\0\u0af6\0\u0b33\0\u0b70\0\u0bad"+
    "\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95"+
    "\0\u0dd2\0\u0e0f\0\u0e4c\0\u044a\0\u0e89\0\u0ec6\0\u0f03\0\u0f40"+
    "\0\u044a\0\u044a\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae"+
    "\0\u10eb\0\u1128\0\267\0\267\0\267\0\267\0\267\0\u1165"+
    "\0\267\0\u11a2\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310"+
    "\0\u0ab9\0\u044a\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e"+
    "\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u044a\0\u15af\0\u15ec\0\u1629"+
    "\0\u1666\0\u044a\0\u16a3\0\u044a\0\u044a\0\u16e0\0\u171d\0\u175a"+
    "\0\u1797\0\u17d4\0\u1811\0\u184e\0\u188b\0\u18c8\0\u044a\0\267"+
    "\0\267\0\267\0\267\0\u1310\0\u044a\0\u1905\0\u044a\0\u1942"+
    "\0\u044a\0\u044a\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\u044a\0\u1a73"+
    "\0\u1ab0\0\u1aed\0\u1b2a\0\u044a\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e"+
    "\0\u1c5b\0\u1c98\0\u044a\0\u1cd5\0\u044a\0\u044a\0\u044a\0\u044a"+
    "\0\u1d12\0\u1d4f\0\u1d8c\0\u044a\0\u1dc9\0\u1e06\0\u044a\0\u1e43"+
    "\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u044a\0\u1fb1\0\u1fee"+
    "\0\u044a\0\u202b\0\u2068\0\u20a5\0\u044a\0\u044a\0\u044a\0\u044a"+
    "\0\u044a\0\u20e2\0\u044a\0\u044a\0\u211f\0\u044a\0\u044a\0\u044a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\4\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\4\6\33\1\34\1\4\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\2\33\1\46\1\33"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\33\1\60\1\61\1\62\1\63\2\64\1\0"+
    "\1\64\1\0\1\64\1\65\32\64\1\66\33\64\2\67"+
    "\3\0\34\67\1\70\33\67\77\0\1\5\121\0\1\71"+
    "\74\0\1\72\76\0\1\73\57\0\1\74\12\0\1\75"+
    "\62\0\1\76\2\0\1\77\1\0\1\24\1\25\3\0"+
    "\1\100\64\0\1\101\1\77\1\0\1\24\1\25\3\0"+
    "\1\102\67\0\2\103\65\0\1\104\4\0\1\105\73\0"+
    "\1\103\1\0\2\25\7\0\1\106\2\0\1\107\1\110"+
    "\11\0\1\106\17\0\1\110\23\0\1\103\1\0\2\25"+
    "\7\0\1\106\2\0\1\107\12\0\1\106\52\0\1\111"+
    "\74\0\1\112\74\0\1\113\67\0\2\33\6\0\6\33"+
    "\4\0\26\33\35\0\6\33\4\0\1\114\25\33\25\0"+
    "\2\33\6\0\6\33\4\0\14\33\1\115\5\33\1\116"+
    "\3\33\25\0\2\33\6\0\6\33\4\0\5\33\1\117"+
    "\7\33\1\120\1\33\1\121\6\33\25\0\2\33\6\0"+
    "\6\33\4\0\1\33\1\122\6\33\1\123\4\33\1\124"+
    "\10\33\25\0\2\33\6\0\6\33\4\0\5\33\1\125"+
    "\7\33\1\126\10\33\25\0\2\33\6\0\6\33\4\0"+
    "\13\33\1\127\1\130\11\33\25\0\2\33\6\0\6\33"+
    "\4\0\13\33\1\131\1\33\1\132\4\33\1\133\3\33"+
    "\25\0\2\33\6\0\6\33\4\0\6\33\1\134\5\33"+
    "\1\135\11\33\25\0\2\33\6\0\6\33\4\0\15\33"+
    "\1\136\10\33\25\0\2\33\6\0\6\33\4\0\5\33"+
    "\1\137\7\33\1\140\10\33\25\0\2\33\6\0\6\33"+
    "\4\0\6\33\1\141\10\33\1\142\6\33\25\0\2\33"+
    "\6\0\6\33\4\0\17\33\1\143\6\33\25\0\2\33"+
    "\6\0\6\33\4\0\5\33\1\144\20\33\25\0\2\33"+
    "\6\0\6\33\4\0\21\33\1\145\2\33\1\146\1\33"+
    "\25\0\2\33\6\0\6\33\4\0\10\33\1\147\15\33"+
    "\25\0\2\33\6\0\6\33\4\0\14\33\1\150\11\33"+
    "\25\0\2\33\6\0\6\33\4\0\15\33\1\151\10\33"+
    "\25\0\2\33\6\0\6\33\4\0\15\33\1\152\10\33"+
    "\3\0\2\64\1\0\1\64\1\0\1\64\1\0\32\64"+
    "\1\0\33\64\6\0\1\153\51\0\1\154\2\0\1\155"+
    "\1\0\1\156\20\0\1\157\71\0\1\160\2\0\1\161"+
    "\46\0\1\162\2\0\1\163\1\0\1\164\31\0\2\103"+
    "\10\0\1\165\15\0\1\165\22\0\14\104\1\166\60\104"+
    "\2\105\1\5\1\105\1\6\70\105\15\0\1\167\1\0"+
    "\1\167\2\0\2\170\73\0\2\171\6\0\3\171\10\0"+
    "\6\171\44\0\2\33\6\0\6\33\4\0\4\33\1\172"+
    "\21\33\25\0\2\33\6\0\6\33\4\0\21\33\1\173"+
    "\4\33\25\0\2\33\6\0\6\33\4\0\7\33\1\174"+
    "\16\33\25\0\2\33\6\0\6\33\4\0\15\33\1\175"+
    "\10\33\25\0\2\33\6\0\6\33\4\0\5\33\1\176"+
    "\20\33\25\0\2\33\6\0\6\33\4\0\20\33\1\177"+
    "\5\33\25\0\2\33\6\0\6\33\4\0\1\33\1\200"+
    "\24\33\25\0\2\33\6\0\6\33\4\0\14\33\1\201"+
    "\11\33\25\0\2\33\6\0\6\33\4\0\6\33\1\202"+
    "\17\33\25\0\2\33\6\0\6\33\4\0\22\33\1\203"+
    "\3\33\25\0\2\33\6\0\6\33\4\0\20\33\1\204"+
    "\5\33\25\0\2\33\6\0\6\33\4\0\4\33\1\205"+
    "\21\33\25\0\2\33\6\0\6\33\4\0\15\33\1\206"+
    "\10\33\25\0\2\33\6\0\6\33\4\0\17\33\1\207"+
    "\6\33\25\0\2\33\6\0\6\33\4\0\14\33\1\210"+
    "\11\33\25\0\2\33\6\0\6\33\4\0\16\33\1\211"+
    "\2\33\1\212\4\33\25\0\2\33\6\0\6\33\4\0"+
    "\14\33\1\213\11\33\25\0\2\33\6\0\6\33\4\0"+
    "\24\33\1\214\1\33\25\0\2\33\6\0\6\33\4\0"+
    "\21\33\1\215\4\33\25\0\2\33\6\0\6\33\4\0"+
    "\11\33\1\216\14\33\25\0\2\33\6\0\6\33\4\0"+
    "\3\33\1\217\12\33\1\220\2\33\1\221\4\33\25\0"+
    "\2\33\6\0\6\33\4\0\17\33\1\222\6\33\25\0"+
    "\2\33\6\0\6\33\4\0\11\33\1\223\14\33\25\0"+
    "\2\33\6\0\6\33\4\0\5\33\1\224\20\33\25\0"+
    "\2\33\6\0\6\33\4\0\21\33\1\225\4\33\25\0"+
    "\2\33\6\0\6\33\4\0\11\33\1\226\14\33\25\0"+
    "\2\33\6\0\6\33\4\0\17\33\1\227\6\33\14\0"+
    "\1\230\74\0\1\231\74\0\1\232\74\0\1\233\116\0"+
    "\1\106\15\0\1\106\23\0\14\104\1\166\4\104\1\5"+
    "\53\104\15\0\1\234\1\0\1\234\2\0\2\170\73\0"+
    "\2\170\73\0\2\33\6\0\6\33\4\0\15\33\1\235"+
    "\10\33\25\0\2\33\6\0\6\33\4\0\11\33\1\236"+
    "\14\33\25\0\2\33\6\0\6\33\4\0\13\33\1\237"+
    "\12\33\25\0\2\33\6\0\6\33\4\0\1\33\1\240"+
    "\24\33\25\0\2\33\6\0\6\33\4\0\5\33\1\241"+
    "\20\33\25\0\2\33\6\0\6\33\4\0\17\33\1\242"+
    "\6\33\25\0\2\33\6\0\6\33\4\0\20\33\1\243"+
    "\1\244\4\33\25\0\2\33\6\0\6\33\4\0\1\33"+
    "\1\245\24\33\25\0\2\33\6\0\6\33\4\0\2\33"+
    "\1\246\23\33\25\0\2\33\6\0\6\33\4\0\5\33"+
    "\1\247\20\33\25\0\2\33\6\0\6\33\4\0\1\33"+
    "\1\250\24\33\25\0\2\33\6\0\6\33\4\0\5\33"+
    "\1\251\20\33\25\0\2\33\6\0\6\33\4\0\3\33"+
    "\1\252\22\33\25\0\2\33\6\0\6\33\4\0\22\33"+
    "\1\253\3\33\25\0\2\33\6\0\6\33\4\0\7\33"+
    "\1\254\16\33\25\0\2\33\6\0\6\33\4\0\14\33"+
    "\1\255\11\33\25\0\2\33\6\0\6\33\4\0\15\33"+
    "\1\256\10\33\25\0\2\33\6\0\6\33\4\0\5\33"+
    "\1\257\20\33\25\0\2\33\6\0\6\33\4\0\22\33"+
    "\1\260\3\33\25\0\2\33\6\0\6\33\4\0\11\33"+
    "\1\261\14\33\25\0\2\33\6\0\6\33\4\0\21\33"+
    "\1\262\4\33\25\0\2\33\6\0\6\33\4\0\14\33"+
    "\1\263\11\33\25\0\2\33\6\0\6\33\4\0\11\33"+
    "\1\264\14\33\25\0\2\33\6\0\6\33\4\0\4\33"+
    "\1\265\21\33\25\0\2\33\6\0\6\33\4\0\14\33"+
    "\1\266\11\33\25\0\2\33\6\0\6\33\4\0\12\33"+
    "\1\267\13\33\25\0\2\33\6\0\6\33\4\0\21\33"+
    "\1\270\4\33\25\0\2\33\6\0\6\33\4\0\11\33"+
    "\1\271\14\33\25\0\2\33\6\0\6\33\4\0\22\33"+
    "\1\272\3\33\25\0\2\33\6\0\6\33\4\0\13\33"+
    "\1\273\12\33\25\0\2\33\6\0\6\33\4\0\21\33"+
    "\1\274\4\33\25\0\2\33\6\0\6\33\4\0\1\33"+
    "\1\275\24\33\25\0\2\33\6\0\6\33\4\0\21\33"+
    "\1\276\4\33\25\0\2\33\6\0\6\33\4\0\21\33"+
    "\1\277\4\33\25\0\2\33\6\0\6\33\4\0\21\33"+
    "\1\300\4\33\25\0\2\33\6\0\6\33\4\0\17\33"+
    "\1\301\6\33\25\0\2\33\6\0\6\33\4\0\1\33"+
    "\1\302\24\33\25\0\2\33\6\0\6\33\4\0\17\33"+
    "\1\303\6\33\25\0\2\33\6\0\6\33\4\0\14\33"+
    "\1\304\11\33\25\0\2\33\6\0\6\33\4\0\3\33"+
    "\1\305\22\33\25\0\2\33\6\0\6\33\4\0\13\33"+
    "\1\306\12\33\25\0\2\33\6\0\6\33\4\0\14\33"+
    "\1\307\11\33\25\0\2\33\6\0\6\33\4\0\13\33"+
    "\1\310\12\33\25\0\2\33\6\0\6\33\4\0\5\33"+
    "\1\311\20\33\25\0\2\33\6\0\6\33\4\0\3\33"+
    "\1\312\22\33\25\0\2\33\6\0\6\33\4\0\11\33"+
    "\1\313\14\33\25\0\2\33\6\0\6\33\4\0\13\33"+
    "\1\314\12\33\25\0\2\33\6\0\6\33\4\0\4\33"+
    "\1\315\21\33\25\0\2\33\6\0\6\33\4\0\21\33"+
    "\1\316\4\33\25\0\2\33\6\0\6\33\4\0\14\33"+
    "\1\317\11\33\25\0\2\33\6\0\6\33\4\0\7\33"+
    "\1\320\16\33\25\0\2\33\6\0\6\33\4\0\10\33"+
    "\1\321\15\33\25\0\2\33\6\0\6\33\4\0\22\33"+
    "\1\322\3\33\25\0\2\33\6\0\6\33\4\0\21\33"+
    "\1\323\4\33\25\0\2\33\6\0\6\33\4\0\10\33"+
    "\1\324\15\33\25\0\2\33\6\0\6\33\4\0\15\33"+
    "\1\325\10\33\25\0\2\33\6\0\6\33\4\0\14\33"+
    "\1\326\11\33\25\0\2\33\6\0\6\33\4\0\5\33"+
    "\1\327\20\33\25\0\2\33\6\0\6\33\4\0\14\33"+
    "\1\330\11\33\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8540];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\2\1\1\11\1\1\2\11\1\1\1\11"+
    "\2\1\1\11\5\1\2\11\4\1\3\11\22\1\3\11"+
    "\1\1\1\11\1\1\2\0\6\11\1\0\3\11\1\1"+
    "\3\0\1\11\1\0\3\11\1\0\36\1\5\11\1\0"+
    "\1\11\3\0\1\1\2\0\40\1\4\11\1\0\74\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer stringLiteral = new StringBuffer();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MyScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Symbol nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              return Symbol.of(ScannerToken.EOF);
            }  // fall though
            case 217: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return Symbol.of(ScannerToken.UNRECOGNIZED, yytext());
            }
            // fall through
          case 93: break;
          case 2:
            { return nextToken();
            }
            // fall through
          case 94: break;
          case 3:
            { stringLiteral.setLength(0); yybegin(STRING_STATE);
            }
            // fall through
          case 95: break;
          case 4:
            { return Symbol.of(ScannerToken.MODULO);
            }
            // fall through
          case 96: break;
          case 5:
            { return Symbol.of(ScannerToken.AND);
            }
            // fall through
          case 97: break;
          case 6:
            { yybegin(CHAR_STATE);
            }
            // fall through
          case 98: break;
          case 7:
            { return Symbol.of(ScannerToken.OPEN_PRANTS);
            }
            // fall through
          case 99: break;
          case 8:
            { return Symbol.of(ScannerToken.CLOSE_PRANTS);
            }
            // fall through
          case 100: break;
          case 9:
            { return Symbol.of(ScannerToken.STAR);
            }
            // fall through
          case 101: break;
          case 10:
            { return Symbol.of(ScannerToken.PLUS);
            }
            // fall through
          case 102: break;
          case 11:
            { return Symbol.of(ScannerToken.COMMA);
            }
            // fall through
          case 103: break;
          case 12:
            { return Symbol.of(ScannerToken.MINUS);
            }
            // fall through
          case 104: break;
          case 13:
            { return Symbol.of(ScannerToken.DIVISION);
            }
            // fall through
          case 105: break;
          case 14:
            { return Symbol.of(ScannerToken.INT_LIT, yytext());
            }
            // fall through
          case 106: break;
          case 15:
            { return Symbol.of(ScannerToken.COLON);
            }
            // fall through
          case 107: break;
          case 16:
            { return Symbol.of(ScannerToken.SEMICOLON);
            }
            // fall through
          case 108: break;
          case 17:
            { return Symbol.of(ScannerToken.SMALLER_THAN);
            }
            // fall through
          case 109: break;
          case 18:
            { return Symbol.of(ScannerToken.EQUAL);
            }
            // fall through
          case 110: break;
          case 19:
            { return Symbol.of(ScannerToken.GREATER_THAN);
            }
            // fall through
          case 111: break;
          case 20:
            { return Symbol.of(ScannerToken.IDENTIFIER, yytext());
            }
            // fall through
          case 112: break;
          case 21:
            { return Symbol.of(ScannerToken.OPEN_BRACK);
            }
            // fall through
          case 113: break;
          case 22:
            { return Symbol.of(ScannerToken.CLOSE_BRACK);
            }
            // fall through
          case 114: break;
          case 23:
            { return Symbol.of(ScannerToken.XOR);
            }
            // fall through
          case 115: break;
          case 24:
            { return Symbol.of(ScannerToken.OPEN_CURLY_BRACK);
            }
            // fall through
          case 116: break;
          case 25:
            { return Symbol.of(ScannerToken.OR);
            }
            // fall through
          case 117: break;
          case 26:
            { return Symbol.of(ScannerToken.CLOSE_CURLY_BRACK);
            }
            // fall through
          case 118: break;
          case 27:
            { stringLiteral.append( yytext() );
            }
            // fall through
          case 119: break;
          case 28:
            { yybegin( YYINITIAL ); return Symbol.of(ScannerToken.STRING_LIT, stringLiteral.toString());
            }
            // fall through
          case 120: break;
          case 29:
            { stringLiteral.append('\\');
            }
            // fall through
          case 121: break;
          case 30:
            { return Symbol.of(ScannerToken.COND_UNEQUAL);
            }
            // fall through
          case 122: break;
          case 31:
            { return Symbol.of(ScannerToken.MODULE_ASSIGN);
            }
            // fall through
          case 123: break;
          case 32:
            { return Symbol.of(ScannerToken.BOOL_PARAN);
            }
            // fall through
          case 124: break;
          case 33:
            { return Symbol.of(ScannerToken.D_STAR);
            }
            // fall through
          case 125: break;
          case 34:
            { return Symbol.of(ScannerToken.STAR_ASSIGN);
            }
            // fall through
          case 126: break;
          case 35:
            { return Symbol.of(ScannerToken.D_PLUS);
            }
            // fall through
          case 127: break;
          case 36:
            { return Symbol.of(ScannerToken.PLUS_ASSIGN);
            }
            // fall through
          case 128: break;
          case 37:
            { return Symbol.of(ScannerToken.D_MINUS);
            }
            // fall through
          case 129: break;
          case 38:
            { return Symbol.of(ScannerToken.MINUS_ASSIGN);
            }
            // fall through
          case 130: break;
          case 39:
            { return Symbol.of(ScannerToken.DOUBLE_LIT, yytext());
            }
            // fall through
          case 131: break;
          case 40:
            { return Symbol.of(ScannerToken.LONG_LIT, yytext());
            }
            // fall through
          case 132: break;
          case 41:
            { return Symbol.of(ScannerToken.SMALLER_THAN_EQUAL);
            }
            // fall through
          case 133: break;
          case 42:
            { return Symbol.of(ScannerToken.COND_EQUAL);
            }
            // fall through
          case 134: break;
          case 43:
            { return Symbol.of(ScannerToken.GREATER_THAN_EQUAL);
            }
            // fall through
          case 135: break;
          case 44:
            { return Symbol.of(ScannerToken.IF);
            }
            // fall through
          case 136: break;
          case 45:
            { return Symbol.of(ScannerToken.IN);
            }
            // fall through
          case 137: break;
          case 46:
            { return Symbol.of(ScannerToken.OF);
            }
            // fall through
          case 138: break;
          case 47:
            { return Symbol.of(ScannerToken.COND_OR);
            }
            // fall through
          case 139: break;
          case 48:
            { stringLiteral.append(yytext());
            }
            // fall through
          case 140: break;
          case 49:
            { stringLiteral.append('\n');
            }
            // fall through
          case 141: break;
          case 50:
            { stringLiteral.append('\r');
            }
            // fall through
          case 142: break;
          case 51:
            { stringLiteral.append('\t');
            }
            // fall through
          case 143: break;
          case 52:
            { yybegin(YYINITIAL); return Symbol.of(ScannerToken.CHAR_LIT, yytext().replace("\'",""));
            }
            // fall through
          case 144: break;
          case 53:
            { yybegin(YYINITIAL); 
            return Symbol.of(ScannerToken.CHAR_LIT, "\\" );
            }
            // fall through
          case 145: break;
          case 54:
            { return Symbol.of(ScannerToken.FLOAT_LIT, yytext().toLowerCase().replace("f",""));
            }
            // fall through
          case 146: break;
          case 55:
            { return Symbol.of(ScannerToken.DOUBLE_LIT,
                        ""+Double.parseDouble(yytext())
                             );
            }
            // fall through
          case 147: break;
          case 56:
            { return Symbol.of(ScannerToken.INT_LIT,
        "" + Integer.parseInt(yytext().toLowerCase().replace("0x",""),16)
        );
            }
            // fall through
          case 148: break;
          case 57:
            { return Symbol.of(ScannerToken.COND_AND);
            }
            // fall through
          case 149: break;
          case 58:
            { return Symbol.of(ScannerToken.END);
            }
            // fall through
          case 150: break;
          case 59:
            { return Symbol.of(ScannerToken.FOR);
            }
            // fall through
          case 151: break;
          case 60:
            { return Symbol.of(ScannerToken.LAN_INT);
            }
            // fall through
          case 152: break;
          case 61:
            { return Symbol.of(ScannerToken.NEW);
            }
            // fall through
          case 153: break;
          case 62:
            { return Symbol.of(ScannerToken.COND_NOT);
            }
            // fall through
          case 154: break;
          case 63:
            { return Symbol.of(ScannerToken.COND_XOR);
            }
            // fall through
          case 155: break;
          case 64:
            { yybegin(YYINITIAL); return Symbol.of(ScannerToken.CHAR_LIT, yytext());
            }
            // fall through
          case 156: break;
          case 65:
            { yybegin(YYINITIAL); 
            return Symbol.of(ScannerToken.CHAR_LIT,  "\n" );
            }
            // fall through
          case 157: break;
          case 66:
            { yybegin(YYINITIAL); 
            return Symbol.of(ScannerToken.CHAR_LIT, "\r" );
            }
            // fall through
          case 158: break;
          case 67:
            { yybegin(YYINITIAL); 
            return Symbol.of(ScannerToken.CHAR_LIT, "\t");
            }
            // fall through
          case 159: break;
          case 68:
            { return Symbol.of(ScannerToken.AUTO);
            }
            // fall through
          case 160: break;
          case 69:
            { return Symbol.of(ScannerToken.LAN_BOOL);
            }
            // fall through
          case 161: break;
          case 70:
            { return Symbol.of(ScannerToken.CASE);
            }
            // fall through
          case 162: break;
          case 71:
            { return Symbol.of(ScannerToken.LAN_CHAR);
            }
            // fall through
          case 163: break;
          case 72:
            { return Symbol.of(ScannerToken.ELSE);
            }
            // fall through
          case 164: break;
          case 73:
            { return Symbol.of(ScannerToken.LAN_LONG);
            }
            // fall through
          case 165: break;
          case 74:
            { return Symbol.of(ScannerToken.THEN,null);
            }
            // fall through
          case 166: break;
          case 75:
            { return Symbol.of(ScannerToken.VOID);
            }
            // fall through
          case 167: break;
          case 76:
            { return Symbol.of(ScannerToken.BEGIN);
            }
            // fall through
          case 168: break;
          case 77:
            { return Symbol.of(ScannerToken.BREAK);
            }
            // fall through
          case 169: break;
          case 78:
            { return Symbol.of(ScannerToken.CONST_KEYWORD);
            }
            // fall through
          case 170: break;
          case 79:
            { return Symbol.of(ScannerToken.LAN_FLOAT);
            }
            // fall through
          case 171: break;
          case 80:
            { return Symbol.of(ScannerToken.INPUT);
            }
            // fall through
          case 172: break;
          case 81:
            { return Symbol.of(ScannerToken.UNTIL);
            }
            // fall through
          case 173: break;
          case 82:
            { return Symbol.of(ScannerToken.LAN_DOUBLE);
            }
            // fall through
          case 174: break;
          case 83:
            { return Symbol.of(ScannerToken.RECORD);
            }
            // fall through
          case 175: break;
          case 84:
            { return Symbol.of(ScannerToken.REPEAT);
            }
            // fall through
          case 176: break;
          case 85:
            { return Symbol.of(ScannerToken.RETURN);
            }
            // fall through
          case 177: break;
          case 86:
            { return Symbol.of(ScannerToken.LAN_STRING);
            }
            // fall through
          case 178: break;
          case 87:
            { return Symbol.of(ScannerToken.SWITCH);
            }
            // fall through
          case 179: break;
          case 88:
            { return Symbol.of(ScannerToken.DEFAULT);
            }
            // fall through
          case 180: break;
          case 89:
            { return Symbol.of(ScannerToken.FOREACH);
            }
            // fall through
          case 181: break;
          case 90:
            { return Symbol.of(ScannerToken.PRINT_LN);
            }
            // fall through
          case 182: break;
          case 91:
            { return Symbol.of(ScannerToken.CONTINUE);
            }
            // fall through
          case 183: break;
          case 92:
            { return Symbol.of(ScannerToken.FUNCTION);
            }
            // fall through
          case 184: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
